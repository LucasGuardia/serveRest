{
  "stats": {
    "suites": 4,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2025-04-03T17:07:12.133Z",
    "end": "2025-04-03T17:07:17.138Z",
    "duration": 5005,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a6369652-88be-4a9b-b2ce-dd8329205d33",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8da3feb0-3670-437c-b1b4-61bddb0d9520",
          "title": "Login",
          "fullFile": "D:\\Projetos\\api\\serveRest_api\\test\\login\\loginUser.test.js",
          "file": "\\test\\login\\loginUser.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Login success",
              "fullTitle": "Login Login success",
              "timedOut": false,
              "duration": 783,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqUserBody = createUserBody()\nconst userCreationResponse = await registerUser(reqUserBody)\nexpect(userCreationResponse.status).to.be.eql(201)\nconst user = reqUserBody.email\nconst password = reqUserBody.password\nconst login = { email: user, password: password }\nconst response = await loginUser(login)\nexpect(response.status).to.be.eql(200)\nJoi.assert(response.body, loginUserSchema)",
              "err": {},
              "uuid": "26e0d78b-2a68-494e-9a3f-313dbfd3a48d",
              "parentUUID": "8da3feb0-3670-437c-b1b4-61bddb0d9520",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid password",
              "fullTitle": "Login Invalid password",
              "timedOut": false,
              "duration": 321,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqUserBody = { email: \"fulano@qa.com\", password: \"\" }\nconst response = await loginUser(reqUserBody)\nexpect(response.status).to.be.eql(400)\nexpect(response.body.password).to.be.eql('password não pode ficar em branco')",
              "err": {},
              "uuid": "afc6bdfd-a048-40b0-afda-c2a97da10e32",
              "parentUUID": "8da3feb0-3670-437c-b1b4-61bddb0d9520",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Invalid email",
              "fullTitle": "Login Invalid email",
              "timedOut": false,
              "duration": 312,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqUserBody = { email: \"\", password: \"teste123\" }\nconst response = await loginUser(reqUserBody)\nexpect(response.status).to.be.eql(400)\nexpect(response.body.email).to.be.eql('email não pode ficar em branco')",
              "err": {},
              "uuid": "674af866-15ce-47a8-b9fa-440ed4a47abd",
              "parentUUID": "8da3feb0-3670-437c-b1b4-61bddb0d9520",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "26e0d78b-2a68-494e-9a3f-313dbfd3a48d",
            "afc6bdfd-a048-40b0-afda-c2a97da10e32",
            "674af866-15ce-47a8-b9fa-440ed4a47abd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1416,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "6a67c604-f9ae-471e-a8d4-ad28fae885c6",
          "title": "Find Users",
          "fullFile": "D:\\Projetos\\api\\serveRest_api\\test\\users\\getUser.test.js",
          "file": "\\test\\users\\getUser.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Find Users\"",
              "fullTitle": "Find Users \"before all\" hook in \"Find Users\"",
              "timedOut": false,
              "duration": 329,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userData = createUserBody()\nuserRegistered = await registerUser(userData)",
              "err": {},
              "uuid": "7e86e04d-cd40-4fbd-b98e-fb6030953262",
              "parentUUID": "6a67c604-f9ae-471e-a8d4-ad28fae885c6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get user by ID",
              "fullTitle": "Find Users Get user by ID",
              "timedOut": false,
              "duration": 311,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUser({ _id: userRegistered.body._id })\nexpect(response.status).to.be.eql(200)\nexpect(response.body.usuarios[0]._id).to.be.eql(userRegistered.body._id)\nJoi.assert(response.body.usuarios[0], getUserSchema)",
              "err": {},
              "uuid": "3fc5e847-58a9-4c9a-8b25-c8578347c7a3",
              "parentUUID": "6a67c604-f9ae-471e-a8d4-ad28fae885c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get user by Name",
              "fullTitle": "Find Users Get user by Name",
              "timedOut": false,
              "duration": 312,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUser({ nome: userData.nome })\nexpect(response.status).to.be.eql(200)\nexpect(response.body.usuarios[0].nome).to.be.eql(userData.nome)",
              "err": {},
              "uuid": "af2ad5ba-8e03-496f-adbe-b1f903154ddb",
              "parentUUID": "6a67c604-f9ae-471e-a8d4-ad28fae885c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get user by Email",
              "fullTitle": "Find Users Get user by Email",
              "timedOut": false,
              "duration": 313,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUser({ email: userData.email })\nexpect(response.status).to.be.eql(200)\nexpect(response.body.usuarios[0].email).to.be.eql(userData.email)",
              "err": {},
              "uuid": "bf7724d8-4571-4e64-bf63-3fc09af85c19",
              "parentUUID": "6a67c604-f9ae-471e-a8d4-ad28fae885c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get user by Administrador",
              "fullTitle": "Find Users Get user by Administrador",
              "timedOut": false,
              "duration": 315,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getUser({ administrador: 'true' })\nexpect(response.status).to.be.eql(200)\nresponse.body.usuarios.forEach(userData => {\n  expect(userData.administrador).to.be.eql('true')\n});",
              "err": {},
              "uuid": "dc831f53-fe0c-4476-a15e-61d5f344cbf1",
              "parentUUID": "6a67c604-f9ae-471e-a8d4-ad28fae885c6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3fc5e847-58a9-4c9a-8b25-c8578347c7a3",
            "af2ad5ba-8e03-496f-adbe-b1f903154ddb",
            "bf7724d8-4571-4e64-bf63-3fc09af85c19",
            "dc831f53-fe0c-4476-a15e-61d5f344cbf1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1251,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "04668e05-f0a6-4357-b676-557cd39e4c57",
          "title": "Product Tests",
          "fullFile": "D:\\Projetos\\api\\serveRest_api\\test\\users\\product.test.js",
          "file": "\\test\\users\\product.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get products",
              "fullTitle": "Product Tests Get products",
              "timedOut": false,
              "duration": 344,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await getProduct()\nexpect(response.status).to.be.eql(200)\njoi.assert(response.body, productSchema)",
              "err": {},
              "uuid": "b8972350-cbf3-4e08-a7d8-71dfe3564be7",
              "parentUUID": "04668e05-f0a6-4357-b676-557cd39e4c57",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b8972350-cbf3-4e08-a7d8-71dfe3564be7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 344,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "bbc9d1e3-aa91-495b-b2e9-2798c7a913a4",
          "title": "Register User",
          "fullFile": "D:\\Projetos\\api\\serveRest_api\\test\\users\\registerUser.test.js",
          "file": "\\test\\users\\registerUser.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Register User Success",
              "fullTitle": "Register User Register User Success",
              "timedOut": false,
              "duration": 324,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqUserBody = createUserBody()\nconst response = await registerUser(reqUserBody)\nexpect(response.status).to.be.eql(201)\nJoi.assert(response.body, schema.registerUserSchema)",
              "err": {},
              "uuid": "19e33c43-49cb-4c8a-b14d-fa558427c085",
              "parentUUID": "bbc9d1e3-aa91-495b-b2e9-2798c7a913a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Register User Invalid Name",
              "fullTitle": "Register User Register User Invalid Name",
              "timedOut": false,
              "duration": 325,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqUserBody = createUserBody({ nome: \"\" })\nconst response = await registerUser(reqUserBody)\nexpect(response.status).to.be.eql(400)\nexpect(response.body.nome).to.be.eql(ERROR_MESSAGES.nome)",
              "err": {},
              "uuid": "1b902c96-4f48-4471-ae72-5912c6b862a5",
              "parentUUID": "bbc9d1e3-aa91-495b-b2e9-2798c7a913a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Register User Invalid Email",
              "fullTitle": "Register User Register User Invalid Email",
              "timedOut": false,
              "duration": 329,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqUserBody = createUserBody({ email: \"\" })\nconst response = await registerUser(reqUserBody)\nexpect(response.status).to.be.eql(400)\nexpect(response.body.email).to.be.eql(ERROR_MESSAGES.email)",
              "err": {},
              "uuid": "710bd4c1-e7b7-45e0-af20-06d20668a195",
              "parentUUID": "bbc9d1e3-aa91-495b-b2e9-2798c7a913a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Register User Invalid Password",
              "fullTitle": "Register User Register User Invalid Password",
              "timedOut": false,
              "duration": 322,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqUserBody = createUserBody({ password: \"\" })\nconst response = await registerUser(reqUserBody)\nexpect(response.status).to.be.eql(400)\nexpect(response.body.password).to.be.eql(ERROR_MESSAGES.password)",
              "err": {},
              "uuid": "75c5993b-2a84-4c68-a486-1f310a37692e",
              "parentUUID": "bbc9d1e3-aa91-495b-b2e9-2798c7a913a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Register User Invalid Administrator",
              "fullTitle": "Register User Register User Invalid Administrator",
              "timedOut": false,
              "duration": 325,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqUserBody = createUserBody({ administrador: \"\" })\nconst response = await registerUser(reqUserBody)\nexpect(response.status).to.be.eql(400)\nexpect(response.body.administrador).to.be.eql(ERROR_MESSAGES.administrador)",
              "err": {},
              "uuid": "c3441b70-fd4c-4130-8849-fe655b8e351e",
              "parentUUID": "bbc9d1e3-aa91-495b-b2e9-2798c7a913a4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "19e33c43-49cb-4c8a-b14d-fa558427c085",
            "1b902c96-4f48-4471-ae72-5912c6b862a5",
            "710bd4c1-e7b7-45e0-af20-06d20668a195",
            "75c5993b-2a84-4c68-a486-1f310a37692e",
            "c3441b70-fd4c-4130-8849-fe655b8e351e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1625,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "[object Object]": true
      },
      "version": "6.2.0"
    }
  }
}